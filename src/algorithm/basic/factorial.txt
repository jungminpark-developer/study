Factorial
(alt + shift + y) 눌러서 편하게 읽기

재귀 함수(Recursion)의 개념
 재귀적 호출(Recursive call)은 일정 조건을 만족할 경우 자신을 호출하는 것을 말하며, 이러한 방식으로 구현한 함수를 재귀 함수라고 한다.

재귀 함수는 잘못된 구조로 코드를 짤 경우 무한루프에 빠질 수 있다. 따라서 재귀 함수를 설계할 때는 적절한 구조를 통해 재귀 호출을 중단하도록 해야 한다.
 입력값의 변화가 없거나 입력값의 변화가 특정 패턴을 반복하게 되면 그 재귀 함수는 영원히 반복되다가 콜 스택 초과로 프로그램이 종료되어 버린다.

재귀 함수를 사용하는 이유
재귀 함수는 for, while을 사용한 반복문(iteration)으로 변경할 수 있고, 반대로 for, while을 사용한 반복문을 재귀 함수로 표현할 수 도 있다.
재귀 함수는 위에서 언급한 것처럼 잘못 사용하면 무한루프에 빠져 스택오버플로우를 발생시킬 수도 있고, 무한루프에 빠지지 않더라도 함수가 계속 호출되면서 함수의 매개변수, 지역변수, 리턴 값 함수 종료 후 돌아가는 위치가 스택 메모리에 저장되면서 stack이 쌓여 결국 마찬가지로 스택오버플로우를 발생시킬 수도 있다.
(메모리를 많이 차지하며, 성능이 반복문에 비해서 느리다고 하는 이유)

재귀 함수의 장점
1. 가독성을 높일 수 있다.
-반복문으로 표현된 경우 반복문이 어떤 목적을 가졌는지 코드를 모두 해석해야 의미를 파악할 수 있다.

2. 변수의 사용을 줄여준다.
-변수의 사용을 줄여준다는 것은 변수가 저장되는 메모리에 대한 이야기가 아니라 mutable state(변경 가능한 상태)를 제거하여 프로그램 오류가 발생할 수 있는 가능성을 줄여준다는 이야기이며, 이는 변수의 수를 줄이는 것뿐만 아니라 변수가 가질 수 있는 값의 종류 또는 범위도 제한하게 되어 함수를 단순하게 만들고, 불변적으로 유지될 수 있도록 한다.

참고:
https://mozi.tistory.com/572
https://wildeveloperetrain.tistory.com/116